// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package get is a generated GoMock package.
package get

import (
	models "caching_web_server/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetDocument mocks base method.
func (m *MockService) GetDocument(ctx context.Context, login, docID string) ([]byte, []byte, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", ctx, login, docID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockServiceMockRecorder) GetDocument(ctx, login, docID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockService)(nil).GetDocument), ctx, login, docID)
}

// GetDocuments mocks base method.
func (m *MockService) GetDocuments(ctx context.Context, login, filterKey, filterValue string, limit int) ([]models.DocsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocuments", ctx, login, filterKey, filterValue, limit)
	ret0, _ := ret[0].([]models.DocsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocuments indicates an expected call of GetDocuments.
func (mr *MockServiceMockRecorder) GetDocuments(ctx, login, filterKey, filterValue, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocuments", reflect.TypeOf((*MockService)(nil).GetDocuments), ctx, login, filterKey, filterValue, limit)
}
