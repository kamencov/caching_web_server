// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package docs is a generated GoMock package.
package docs

import (
	models "caching_web_server/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// DeleteDocument mocks base method.
func (m *Mockstorage) DeleteDocument(ctx context.Context, login string, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocument", ctx, login, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDocument indicates an expected call of DeleteDocument.
func (mr *MockstorageMockRecorder) DeleteDocument(ctx, login, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocument", reflect.TypeOf((*Mockstorage)(nil).DeleteDocument), ctx, login, id)
}

// GetDocumentByID mocks base method.
func (m *Mockstorage) GetDocumentByID(ctx context.Context, docID uuid.UUID, login string) (*models.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentByID", ctx, docID, login)
	ret0, _ := ret[0].(*models.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentByID indicates an expected call of GetDocumentByID.
func (mr *MockstorageMockRecorder) GetDocumentByID(ctx, docID, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentByID", reflect.TypeOf((*Mockstorage)(nil).GetDocumentByID), ctx, docID, login)
}

// GetDocuments mocks base method.
func (m *Mockstorage) GetDocuments(ctx context.Context, login, filterKey, filterValue string, limit int) ([]models.DocsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocuments", ctx, login, filterKey, filterValue, limit)
	ret0, _ := ret[0].([]models.DocsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocuments indicates an expected call of GetDocuments.
func (mr *MockstorageMockRecorder) GetDocuments(ctx, login, filterKey, filterValue, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocuments", reflect.TypeOf((*Mockstorage)(nil).GetDocuments), ctx, login, filterKey, filterValue, limit)
}

// GetUserID mocks base method.
func (m *Mockstorage) GetUserID(ctx context.Context, login string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, login)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockstorageMockRecorder) GetUserID(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*Mockstorage)(nil).GetUserID), ctx, login)
}

// SaveDocument mocks base method.
func (m *Mockstorage) SaveDocument(ctx context.Context, doc *models.Document, grants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDocument", ctx, doc, grants)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDocument indicates an expected call of SaveDocument.
func (mr *MockstorageMockRecorder) SaveDocument(ctx, doc, grants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDocument", reflect.TypeOf((*Mockstorage)(nil).SaveDocument), ctx, doc, grants)
}

// Mocks3 is a mock of s3 interface.
type Mocks3 struct {
	ctrl     *gomock.Controller
	recorder *Mocks3MockRecorder
}

// Mocks3MockRecorder is the mock recorder for Mocks3.
type Mocks3MockRecorder struct {
	mock *Mocks3
}

// NewMocks3 creates a new mock instance.
func NewMocks3(ctrl *gomock.Controller) *Mocks3 {
	mock := &Mocks3{ctrl: ctrl}
	mock.recorder = &Mocks3MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocks3) EXPECT() *Mocks3MockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *Mocks3) DeleteFile(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *Mocks3MockRecorder) DeleteFile(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*Mocks3)(nil).DeleteFile), key)
}

// GetFile mocks base method.
func (m *Mocks3) GetFile(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *Mocks3MockRecorder) GetFile(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*Mocks3)(nil).GetFile), key)
}

// SaveFile mocks base method.
func (m *Mocks3) SaveFile(ctx context.Context, key string, data []byte, contentType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", ctx, key, data, contentType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *Mocks3MockRecorder) SaveFile(ctx, key, data, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*Mocks3)(nil).SaveFile), ctx, key, data, contentType)
}
